








package permissions.db.repos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;


import permissions.db.AddresessRepository;
import permissions.db.AdddressRepository2;
import permissions.db.PagingInfo;
import permissions.db.UserRepository;
import permissions.domain.Address;
import permissions.domain.Person;

public class HsqlAddresesRepository implements AddresessRepository{

    private Connection connection;

    private String insertSql ="INSERT INTO address (country,city,street,postalCode,houseNumber,localNumer) VALUES(?,?,?,?,?,?)";
    private String selectSql ="SELECT * FROM address LIMIT(?,?,?,?,?,?)";
    private String selectByCountrySql ="SELECT * FROM address WHERE country=? LIMIT(?,?)";
    private String selectByCitySql ="SELECT * FROM address WHERE city=? LIMIT(?,?)";
    private String selectByStreetSql ="SELECT * FROM address WHERE street=? LIMIT(?,?)";
    private String selectByPostalCodeSql ="SELECT * FROM address WHERE postalCode=? LIMIT(?,?)";
    private String selectByHouseNumberSql ="SELECT * FROM address WHERE houseNumber=? LIMIT(?,?)";
    private String selectByLocalNumberSql ="SELECT * FROM user WHERE localNumber=? LImit(?,?)";
    private String deleteSql = "DELETE FROM User WHERE id=?";
    private String updateSql = "UPDATE User SET country,city,street,postalCode,houseNumber,localNumer) VALUES(?,?,?,?,?,?)";

    private PreparedStatement insert;
    private PreparedStatement select;
    private PreparedStatement selectByCountry;
    private PreparedStatement selectByCity;
    private PreparedStatement selectByStreet;
    private PreparedStatement selectByPostalCode;
    private PreparedStatement selectByHouseNumber;
    private PreparedStatement selectByLocalNumber;
    private PreparedStatement delete;
    private PreparedStatement update;


    private String createAddressTable =""
            + "CREATE TABLE Adress("
            + "id bigint GENERATED BY DEFAULT AS IDENTITY,"
            + "country VARCHAR(20),"
            + "city VARCHAR(20),"
            + "street VARCHAR(20),"
            + "postalCode INT(10),"
            + "houseNumber INT(5),"
            + "localNumer INT(30),"
            + ")";


    public HsqlAddresesRepository(Connection connection){
        this.connection=connection;
        try{


            insert = connection.prepareStatement(insertSql);
            select = connection.prepareStatement(selectSql);
            selectByCountry = connection.prepareStatement(selectByCountrySql);
            selectByCity = connection.prepareStatement(selectByCitySql);
            selectByStreet = connection.prepareStatement(selectByStreetSql);
            selectByPostalCode = connection.prepareStatement(selectByPostalCodeSql);
            selectByHouseNumber = connection.prepareStatement(selectByHouseNumberSql);
            selectByLocalNumber= connection.prepareStatement(selectByLocalNumberSql);
            delete = connection.prepareStatement(deleteSql);
            update = connection.prepareStatement(updateSql);


            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);

            boolean tableExists =false;
            while(rs.next())
            {
                if(rs.getString("TABLE_NAME").equalsIgnoreCase("Address")){
                    tableExists=true;
                    break;
                }
            }
            if(!tableExists){
                Statement createTable = connection.createStatement();
                createTable.executeUpdate(createAddressTable);
            }
        }catch(SQLException ex){
            ex.printStackTrace();
        }

    }


    public Address withCounntry() {
        Person result = null;
        try {
            selectByCountry.setString(1,"");
            ResultSet rs = selectByCountry.executeQuery();
            while(rs.next()){
                Address address = new Address();
                address.setCity(rs.getString("city"));
                address.setStreet(rs.getString("street"));
                address.setPostalCode(rs.getString("postalCode"));
                address.setHouseNumber(rs.getString("houseNumber"));
                address.setLocalNumber(rs.getString("localNumber"));

                result = address;
                break;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return (Address) result;
    }
    public Address withCity() {
        Person result = null;
        try {
            selectByCountry.setString(1,"");
            ResultSet rs = selectByCountry.executeQuery();
            while(rs.next()){
                Address address = new Address();
                address.setCountry(rs.getString("country"));
                address.setStreet(rs.getString("street"));
                address.setPostalCode(rs.getString("postalCode"));
                address.setHouseNumber(rs.getString("houseNumber"));
                address.setLocalNumber(rs.getString("localNumber"));

                result = address;
                break;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return (Address) result;}

    public Address withstreet() {
        Person result = null;
        try {
            selectByCountry.setString(1, "");
            ResultSet rs = selectByCountry.executeQuery();
            while (rs.next()) {
                Address address = new Address();
                address.setCity(rs.getString("city"));
                address.setCountry(rs.getString("country"));
                address.setPostalCode(rs.getString("postalCode"));
                address.setHouseNumber(rs.getString("houseNumber"));
                address.setLocalNumber(rs.getString("localNumber"));

                result = address;
                break;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return (Address) result;
    }

    public Address withpostalCode() {
        Person result = null;
        try {
            selectByCountry.setString(1, "");
            ResultSet rs = selectByCountry.executeQuery();
            while (rs.next()) {
                Address address = new Address();
                address.setCity(rs.getString("city"));
                address.setCountry(rs.getString("country"));
                address.setStreet(rs.getString("street"));
                address.setHouseNumber(rs.getString("houseNumber"));
                address.setLocalNumber(rs.getString("localNumber"));

                result = address;
                break;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return (Address) result;
    }

    public Address withhouseNumber() {
        Person result = null;
        try {
            selectByCountry.setString(1, "");
            ResultSet rs = selectByCountry.executeQuery();
            while (rs.next()) {
                Address address = new Address();
                address.setCity(rs.getString("city"));
                address.setCountry(rs.getString("country"));
                address.setStreet(rs.getString("street"));
                address.setPostalCode(rs.getString("postalCode"));
                address.setLocalNumber(rs.getString("localNumber"));

                result = address;
                break;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return (Address) result;
    }

    public Address withlocalnumber() {
        Person result = null;
        try {
            selectByCountry.setString(1, "");
            ResultSet rs = selectByCountry.executeQuery();
            while (rs.next()) {
                Address address = new Address();
                address.setCity(rs.getString("city"));
                address.setCountry(rs.getString("country"));
                address.setStreet(rs.getString("street"));
                address.setPostalCode(rs.getString("postalCode"));
                address.setHouseNumber(rs.getString("houseNumber"));

                result = address;
                break;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return (Address) result;
    }





    public void add(Address address) {
        try {
            insert.setString(1, address.getCountry());
            insert.setString(2, address.getCity());
            insert.setString(3, address.getStreet());
            insert.setString(4, address.getPostalCode());
            insert.setString(5, address.getHouseNumber());
            insert.setString(6, address.getLocalNumber());

            insert.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    public void modify(Address a) {
        try {
            update.setString(1, a.getCountry());
            update.setString(2, a.getCity());
            update.setString(3, a.getStreet());
            update.setString(4, a.getPostalCode());
            update.setString(5, a.getHouseNumber());
            update.setString(6, a.getLocalNumber());
            update.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    public void remove(Address p) {
        try {
            delete.setInt(1, p.getId());
            delete.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    public List<Address> withCity(String city, PagingInfo page) {

        List<Address> result = new ArrayList<Address>();
        try {
            selectByCity.setString(1, city);
            selectByCity.setInt(2, page.getCurrentPage()*page.getSize());
            selectByCity.setInt(3, page.getSize());
            ResultSet rs = selectByStreet.executeQuery();
            while(rs.next()){
                Address address = new Address();
                address.setCountry(rs.getString("country"));
                address.setCity(rs.getString("city"));
                address.setStreet(rs.getString("street"));
                address.setPostalCode(rs.getString("postalCode"));
                address.setHouseNumber(rs.getString("houseNumber"));
                address.setLocalNumber(rs.getString("localnumber"));
                address.setId(rs.getInt("id"));
                result.add(address);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return  result;
    }

    public List<Address> withCountry(String country, PagingInfo page) {

        List<Address> result = new ArrayList<Address>();
        try {
            selectByCountry.setString(1, country);
            selectByCountry.setInt(2, page.getCurrentPage() * page.getSize());
            selectByCountry.setInt(3, page.getSize());
            ResultSet rs = selectByStreet.executeQuery();
            while (rs.next()) {
                Address address = new Address();
                address.setCountry(rs.getString("country"));
                address.setCity(rs.getString("city"));
                address.setStreet(rs.getString("street"));
                address.setPostalCode(rs.getString("postalCode"));
                address.setHouseNumber(rs.getString("houseNumber"));
                address.setLocalNumber(rs.getString("localnumber"));
                address.setId(rs.getInt("id"));
                result.add(address);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return result;

    }
    public List<Address> withstreet(String street, PagingInfo page) {

        List<Address> result = new ArrayList<Address>();
        try {
            selectByStreet.setString(1, street);
            selectByStreet.setInt(2, page.getCurrentPage() * page.getSize());
            selectByStreet.setInt(3, page.getSize());
            ResultSet rs = selectByStreet.executeQuery();
            while (rs.next()) {
                Address address = new Address();
                address.setCountry(rs.getString("country"));
                address.setCity(rs.getString("city"));
                address.setStreet(rs.getString("street"));
                address.setPostalCode(rs.getString("postalCode"));
                address.setHouseNumber(rs.getString("houseNumber"));
                address.setLocalNumber(rs.getString("localnumber"));
                address.setId(rs.getInt("id"));
                result.add(address);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return result;

    }

    public List<Address> PostalCode(String postalCode, PagingInfo page) {

        List<Address> result = new ArrayList<Address>();
        try {
            selectByPostalCode.setString(1, postalCode);
            selectByPostalCode.setInt(2, page.getCurrentPage() * page.getSize());
            selectByPostalCode.setInt(3, page.getSize());
            ResultSet rs = selectByStreet.executeQuery();
            while (rs.next()) {
                Address address = new Address();
                address.setCountry(rs.getString("country"));
                address.setCity(rs.getString("city"));
                address.setStreet(rs.getString("street"));
                address.setPostalCode(rs.getString("postalCode"));
                address.setHouseNumber(rs.getString("houseNumber"));
                address.setLocalNumber(rs.getString("localnumber"));
                address.setId(rs.getInt("id"));
                result.add(address);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return result;

    }
    public List<Address> withhouseNumber(String houseNumber, PagingInfo page) {

        List<Address> result = new ArrayList<Address>();
        try {
            selectByCountry.setString(1, houseNumber);
            selectByCountry.setInt(2, page.getCurrentPage() * page.getSize());
            selectByCountry.setInt(3, page.getSize());
            ResultSet rs = selectByStreet.executeQuery();
            while (rs.next()) {
                Address address = new Address();
                address.setCountry(rs.getString("country"));
                address.setCity(rs.getString("city"));
                address.setStreet(rs.getString("street"));
                address.setPostalCode(rs.getString("postalCode"));
                address.setHouseNumber(rs.getString("houseNumber"));
                address.setLocalNumber(rs.getString("localnumber"));
                address.setId(rs.getInt("id"));
                result.add(address);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return result;

    }
    public List<Address> withlocalNumber(String localNumber, PagingInfo page) {

        List<Address> result = new ArrayList<Address>();
        try {
            selectByCountry.setString(1, localNumber);
            selectByCountry.setInt(2, page.getCurrentPage() * page.getSize());
            selectByCountry.setInt(3, page.getSize());
            ResultSet rs = selectByStreet.executeQuery();
            while (rs.next()) {
                Address address = new Address();
                address.setCountry(rs.getString("country"));
                address.setCity(rs.getString("city"));
                address.setStreet(rs.getString("street"));
                address.setPostalCode(rs.getString("postalCode"));
                address.setHouseNumber(rs.getString("houseNumber"));
                address.setLocalNumber(rs.getString("localnumber"));
                address.setId(rs.getInt("id"));
                result.add(address);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return result;

    }
}