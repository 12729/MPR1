package permissions.db.repos;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import permissions.db.PagingInfo;
import permissions.db.PersonRepository;
import permissions.domain.Person;
import permissions.domain.Permission;

public class HsqlPermissionRepository implements PersonRepository {

    private Connection connection;

    private String insertSql ="INSERT INTO Permission (id ,name) VALUES(?,?)";
    private String selectSql ="SELECT * FROM PermissionLIMIT(?,?)";
    private String selectByIdSql ="SELECT * FROM Permission WHERE id=?";
    private String selectByNameSql ="SELECT * FROM Permission WHERE password=? LImit(?,?)";
    private String deleteSql = "DELETE FROM Permission WHERE id=?";
    private String updateSql = "UPDATE Permission SET (name,password)=(?,?) WHERE id=?";

    private PreparedStatement insert;
    private PreparedStatement select;
    private PreparedStatement selectById;
    private PreparedStatement selectByName;
    private PreparedStatement delete;
    private PreparedStatement update;


    private String createPermissionTable =""
            + "CREATE TABLE Permission("
            + "id bigint GENERATED BY DEFAULT AS IDENTITY,"
            + "name VARCHAR(20),"
            + ")";


    public HsqlPermissionRepository(Connection connection){
        this.connection=connection;

        try{


            insert = connection.prepareStatement(insertSql);
            select = connection.prepareStatement(selectSql);
            selectById = connection.prepareStatement(selectByIdSql);
            selectByName = connection.prepareStatement(selectByNameSql);
            delete = connection.prepareStatement(deleteSql);
            update = connection.prepareStatement(updateSql);


            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);

            boolean tableExists =false;
            while(rs.next())
            {
                if(rs.getString("TABLE_NAME").equalsIgnoreCase("Permission")){
                    tableExists=true;
                    break;
                }
            }
            if(!tableExists){
                Statement createTable = connection.createStatement();
                createTable.executeUpdate(createPermissionTable);
            }
        }catch(SQLException ex){
            ex.printStackTrace();
        }

    }


    public Permission withId(int id) {
        Permission result = null;
        try {
            selectById.setInt(1, id);
            ResultSet rs = selectById.executeQuery();
            while(rs.next()){
                Permission permission = new Permission();
                permission.setName(rs.getString("name"));
                permission.setId(rs.getInt("id"));
                result = permission;
                break;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    public List<Permission> allOnPage(PagingInfo page) {
        List<Permission> result = new ArrayList<Permission>();

        try {
            select.setInt(1, page.getCurrentPage()*page.getSize());
            select.setInt(2, page.getSize());
            ResultSet rs = select.executeQuery();
            while(rs.next()){
                Person person = new Person();
                person.setName(rs.getString("name"));
                person.setId(rs.getInt("id"));
                result.add(Permission;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

    public void add(Permission permission) {
        try {
            insert.setString(1, permission.getName());

            insert.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    public void modify(Permission permission) {
        try {
            update.setString(1, permission.getName());
            update.setInt(3, permission.getId());
            update.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    public void remove(Permission permission) {
        try {
            delete.setInt(1, permission.getId());
            delete.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    public List<Permission> withName(String name, PagingInfo page) {

        List<Permission> result = new ArrayList<Permission>();
        try {
            selectByName.setString(1, name;
            selectByName.setInt(2, page.getCurrentPage()*page.getSize());
            selectByName.setInt(3, page.getSize());
            ResultSet rs = selectByName.executeQuery();
            while(rs.next()){
                Permission permission = new Permission();
                permission.setName(rs.getString("name"));
                permission.setId(rs.getInt("id"));
                result.add(permission);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }


}










