package permissions.db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import permissions.domain.Person;
import permissions.domain.Address;

public class AddressDbManager {

    private Connection connection;
    private String url = "jdbc:hsqldb:hsql://localhost/workdb";

    private String createUserTable =""
            + "CREATE TABLE Adress("
            + "id bigint GENERATED BY DEFAULT AS IDENTITY,"
            + "country VARCHAR(20),"
            + "city VARCHAR(20),"
            + "street VARCHAR(20),"
            + "postalCode INT(10),"
            + "houseNumber INT(5),"
            + "localNumer INT(30),"
            + ")";

    private String insertSql ="INSERT INTO user(username,password) VALUES(?,?)";
    private String selectSql ="SELECT * FROM Adress";
    private String deleteSql = "DELETE FROM Adress WHERE id=?";
    private String updateSql = "UPDATE Adress SET (country,city,street,postalCode,houseNumber,localNumber)=(?,?,?,?,?,?) WHERE id=?";

    private PreparedStatement insert;
    private PreparedStatement select;
    private PreparedStatement delete;
    private PreparedStatement update;

    public AddressDbManager(){

        try {
            connection = DriverManager.getConnection(url);

            insert = connection.prepareStatement(insertSql);
            select = connection.prepareStatement(selectSql);
            delete = connection.prepareStatement(deleteSql);
            update = connection.prepareStatement(updateSql);
            ResultSet rs = connection.getMetaData().getTables(null, null, null, null);

            boolean tableExists =false;
            while(rs.next())
            {
                if(rs.getString("TABLE_NAME").equalsIgnoreCase("Adress")){
                    tableExists=true;
                    break;
                }
            }

            if(!tableExists){
                Statement createTable = connection.createStatement();
                createTable.executeUpdate(createUserTable);
            }


        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void add(Address address){

        try {
            insert.setString(1, address.getCountry());
            insert.setString(2, address.getCity());
            insert.setString(3, address.getStreet());
            insert.setString(4, address.getPostalCode());
            insert.setString(5, address.getHouseNumber());
            insert.setString(6, address.getLocalNumber());

            insert.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    public void deleteById(int id){

        try {
            delete.setInt(1, id);
            delete.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    public void update(Address a){

        try {
            update.setString(1, a.getCountry());
            update.setString(2, a.getCity());
            update.setString(3, a.getStreet());
            update.setString(4, a.getPostalCode());
            update.setString(5, a.getHouseNumber());
            update.setString(6, a.getLocalNumber());
            update.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }


    }

    public List<Address> getAll(){

        List<Address> result = new ArrayList<Address>();

        try {
            ResultSet rs = select.executeQuery();
            while(rs.next()){
                Address person = new Address();
                person.setCountry(rs.getString("country"));
                person.setCity(rs.getString("city"));
                person.setStreet(rs.getString("street"));
                person.setPostalCode(rs.getString("postalCode"));
                person.setHouseNumber(rs.getString("houseNumber"));
                person.setLocalNumber(rs.getString("localNumber"));

                result.add(person);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return result;
    }

}
